package gui;

import javax.swing.*;

import com.toedter.calendar.JDateChooser;

import java.awt.*;
import controller.ToolCtrl;

public class ThemThuoc_GUI extends JPanel {

    private JTextField txtTenThuoc;
    private JTextField txtDangThuoc;
    private JComboBox<String> cmbDonVi;
    private JTextField txtGiaBan;
    private JComboBox<String> cmbThue;
    private JComboBox<String> cmbKeThuoc;
    private JDateChooser dpHanSuDung;
    private JLabel imgThuoc;
    private JButton btnChonAnh, btnLamMoi, btnThem;

    private final ToolCtrl tool = new ToolCtrl();
	private JComboBox cmbQuocGia;
	private JSpinner spSoLuongTon;

    public ThemThuoc_GUI() {
        setLayout(new BorderLayout());
        setBackground(Color.WHITE);

        // ===== TOP: Ti√™u ƒë·ªÅ =====
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 15));
        topPanel.setBackground(Color.WHITE);
        JLabel lblTitle = new JLabel("TH√äM THU·ªêC", SwingConstants.CENTER);
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 18));
        topPanel.add(lblTitle);
        add(topPanel, BorderLayout.NORTH);

        // ===== CENTER: Form nh·∫≠p =====
        JPanel centerPanel = new JPanel(new GridBagLayout());
        centerPanel.setBackground(Color.WHITE);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 12, 8, 12);
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;

        int row = 0;

        // === C·ªôt tr√°i: ·∫¢nh + n√∫t ch·ªçn ·∫£nh ===
        gbc.gridx = 0;
        gbc.gridy = row;
        gbc.gridheight = 5;
        imgThuoc = new JLabel();
        imgThuoc.setPreferredSize(new Dimension(160, 220));
        imgThuoc.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        imgThuoc.setHorizontalAlignment(SwingConstants.CENTER);
        centerPanel.add(imgThuoc, gbc);

        gbc.gridheight = 1;
        gbc.gridy = row + 5;
        btnChonAnh = tool.taoButton("Ch·ªçn ·∫£nh", "/picture/keThuoc/folder.png");
        centerPanel.add(btnChonAnh, gbc);

     // === C·ªôt gi·ªØa (th√¥ng tin 1) ===
        gbc.gridx = 1;
        gbc.gridy = 0;
        centerPanel.add(taoDong("T√™n thu·ªëc:", txtTenThuoc = tool.taoTextField("T√™n thu·ªëc...")), gbc);

        gbc.gridy++;
        centerPanel.add(taoDong("D·∫°ng thu·ªëc:", txtDangThuoc = tool.taoTextField("D·∫°ng thu·ªëc...")), gbc);

        gbc.gridy++;
        centerPanel.add(taoDong("ƒê∆°n v·ªã:", cmbDonVi = new JComboBox<>()), gbc);

        // üü¢ Th√™m d√≤ng Qu·ªëc gia
        gbc.gridy++;
        centerPanel.add(taoDong("Qu·ªëc gia:", cmbQuocGia = new JComboBox<>()), gbc);
        cmbQuocGia.addItem("Vi·ªát Nam");
        cmbQuocGia.addItem("M·ªπ");
        cmbQuocGia.addItem("Ph√°p");
        cmbQuocGia.addItem("Nh·∫≠t B·∫£n");

        // üü¢ Th√™m d√≤ng S·ªë l∆∞·ª£ng t·ªìn
        gbc.gridy++;
        spSoLuongTon = new JSpinner(new SpinnerNumberModel(0, 0, 100000, 1));
        JTextField txtSoLuongTon = ((JSpinner.DefaultEditor) spSoLuongTon.getEditor()).getTextField();
        txtSoLuongTon.setEditable(true);
        centerPanel.add(taoDong("S·ªë l∆∞·ª£ng t·ªìn:", spSoLuongTon), gbc);

        // === C·ªôt ph·∫£i (th√¥ng tin 2) ===
        gbc.gridy++;
        centerPanel.add(taoDong("Gi√° b√°n:", txtGiaBan = tool.taoTextField("Gi√° b√°n...")), gbc);

        gbc.gridy++;
        dpHanSuDung = tool.taoDateChooser();
        centerPanel.add(taoDong("H·∫°n s·ª≠ d·ª•ng:", dpHanSuDung), gbc);

        gbc.gridy++;
        centerPanel.add(taoDong("Thu·∫ø VAT:", cmbThue = new JComboBox<>()), gbc);

        gbc.gridy++;
        centerPanel.add(taoDong("K·ªá thu·ªëc:", cmbKeThuoc = new JComboBox<>()), gbc);

        add(centerPanel, BorderLayout.CENTER);

        // ===== BOTTOM: C√°c n√∫t =====
        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 40, 10));
        bottomPanel.setBackground(Color.WHITE);

        btnLamMoi = tool.taoButton("L√†m m·ªõi", "/picture/keThuoc/refresh.png");
        btnThem = tool.taoButton("Th√™m", "/picture/keThuoc/edit.png");

        bottomPanel.add(btnLamMoi);
        bottomPanel.add(btnThem);
        add(bottomPanel, BorderLayout.SOUTH);

        // ===== S·ª∞ KI·ªÜN =====
        btnLamMoi.addActionListener(e -> onBtnLamMoi());
        btnThem.addActionListener(e -> onBtnThem());
        btnChonAnh.addActionListener(e -> onBtnChonAnh());
    }

    // ====== H√†m t·∫°o 1 d√≤ng nh√£n + √¥ nh·∫≠p ======
    private JPanel taoDong(String label, JComponent comp) {
        JPanel row = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        row.setBackground(Color.WHITE);

        JLabel lbl = tool.taoLabel(label);
        lbl.setPreferredSize(new Dimension(120, 25));
        comp.setPreferredSize(new Dimension(180, 25));

        row.add(lbl);
        row.add(comp);
        return row;
    }

    // ===== Event handlers =====
    private void onBtnLamMoi() {
        txtTenThuoc.setText("");
        txtDangThuoc.setText("");
        cmbDonVi.setSelectedIndex(-1);
        txtGiaBan.setText("");
        dpHanSuDung.setDate(new java.util.Date());
        cmbThue.setSelectedIndex(-1);
        cmbKeThuoc.setSelectedIndex(-1);
        imgThuoc.setIcon(null);
        txtTenThuoc.requestFocus();
    }

    private void onBtnThem() {
        // TODO: x·ª≠ l√Ω th√™m thu·ªëc
    }

    private void onBtnChonAnh() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Ch·ªçn ·∫£nh thu·ªëc");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(
                "H√¨nh ·∫£nh (.jpg, .png, .jpeg)", "jpg", "png", "jpeg"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            java.io.File file = fileChooser.getSelectedFile();
            ImageIcon icon = new ImageIcon(file.getAbsolutePath());
            Image scaled = icon.getImage().getScaledInstance(160, 220, Image.SCALE_SMOOTH);
            imgThuoc.setIcon(new ImageIcon(scaled));
        }
    }
}
